server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index index.html index.htm;  
        # for vue-router reload , refresh
        try_files $uri $uri/ /index.html;

        # proxy_pass  http://web;

        # CORS start
        add_header Access-Control-Allow-Origin null;
        add_header Access-Control-Allow-Methods "POST, GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, Authorization, Accept";
        add_header Access-Control-Allow-Credentials true;
        # CORS end

        # # kill cache for development
        # add_header Last-Modified $date_gmt;
        # add_header Cache-Control 'no-store, no-cache';
        # # if_modified_since off;
        # expires -1;
        # etag off;
        # proxy_cache_bypass 1; 
    }

    # # to solve: client:244 WebSocket connection to 'ws://localhost/' failed: 
    # location /ws {
    #     proxy_pass http://web;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "Upgrade";
    # }


 location /api {  
        # 将所有/api的请求转发到另一个服务器  
        rewrite /api/(.*) /$1 break; # remove /api
        proxy_pass  http://api;

#         # proxy_pass http://localhost:3000/$1; # 替换为你的后端服务器地址和端口  
#         # proxy_http_version 1.1;  
#         # proxy_set_header Upgrade $http_upgrade;  
#         # proxy_set_header Connection 'upgrade';  
#         # proxy_set_header Host $host;  
#         # proxy_cache_bypass $http_upgrade;  
  
#         # # 以下行可以保留或根据需要进行调整  
#         # proxy_set_header X-Real-IP $remote_addr;  
#         # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
#         # proxy_set_header X-Forwarded-Proto $scheme;  
  
#         # 如果你的后端API服务器是基于路径的，你可能需要调整这里的proxy_pass设置  
#         # 例如，如果你的后端服务器也使用/api作为前缀，你可能需要这样做：  
#         # proxy_pass http://backend.example.com:8080/api;  
#         # 但请注意，这可能会导致路径重复，具体取决于你的后端如何处理这些请求  
     }  

    # location /pgapi {
    #     rewrite /pgapi/(.*) /$1 break;
    #     proxy_pass  http://pgapi;
    # }	    
	
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

upstream api {
   server json-server:3000;
}

# upstream pgapi {
#     server postgrest:3000;
# }

# upstream web {
#     server icareer_front:5073;
# }

