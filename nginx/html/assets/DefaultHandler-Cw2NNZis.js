import{d as y,Y as S,Z as P,Q as H,r as v,q as B,i as I,j as O,k as m,s as b,e as C,$ as N,C as T,M as G,a0 as x,m as U}from"./index-D68vIrQ9.js";/* empty css              */import{b as c,v as V,w as j,d as p}from"./DefaultLayoutStore-CNnqFBO4.js";const L=e=>({options:{eventHandler:(e==null?void 0:e.eventHandler)??"DefaultHandler",layoutStore:(e==null?void 0:e.layoutStore)??"DefaultLayoutStore",dataStore:(e==null?void 0:e.dataStore)??"DefaultDataStore"}}),k=Object.freeze(Object.defineProperty({__proto__:null,defaultConfig:L},Symbol.toStringTag,{value:"Module"})),w={gsPageHandler:"__gs_page_handler",gsPageConfigOptions:"__gs_page_config_options__",gsPageConfig:"__gs_page_config__"};function A(e){const a=Object.assign({alias:"GridLayoutConfig"},typeof e=="function"?e():e);console.log("***options",a);const t=L(a.config||{}).options;a.config={rootConfig:t},H(w.gsPageConfigOptions,a),H(w.gsPageConfig,t)}const E=y(function(a,{slots:t,attrs:n}){const i={};return a.config&&A(a.config),()=>t.default?t.default(i).map(r=>S(r,{...n,...r.props})):null},{props:["config"],name:"GridLayoutProvider",inheritAttrs:!1}),ee=y(async function(a,t){let n={};if(a.configFile){const r=await import(a.configFile);n="default"in r?r.default:r}if(console.log("config",n),typeof n=="function"&&(n=n()),a.defaultConfig??!0){const{defaultConfig:r}=await P(async()=>{const{defaultConfig:l}=await Promise.resolve().then(()=>k);return{defaultConfig:l}},[]);n=r(n).options}return console.log("now config",n),()=>S(E,{...t.attrs,config:n},t.slots)},{props:["defaultConfig","configFile"],inheritAttrs:!1}),ae=y({__name:"PageInfoDialog",props:{show:{type:Boolean,default:!1},items:{type:Object,default:[]}},setup(e){const a=e,t=v(!1),n=v("");B(a,()=>{t.value=a.show,n.value=JSON.stringify(a.items||[],null,"  ")});const i=async()=>{t.value=!1};return(r,l)=>{const h=N,_=T,D=G;return I(),O(D,{visible:t.value,"onUpdate:visible":l[1]||(l[1]=f=>t.value=f),onOk:i,draggable:"","unmount-on-close":"","hide-cancel":!0},{title:m(()=>[b(" Page Layout Info ")]),default:m(()=>[C(_,{direction:"vertical",size:"large",fill:""},{default:m(()=>[C(h,{modelValue:n.value,"onUpdate:modelValue":l[0]||(l[0]=f=>n.value=f),class:"h-80","allow-clear":"","show-word-limit":""},null,8,["modelValue"])]),_:1})]),_:1},8,["visible"])}}}),u=`${j}/comp_data`,F=x("defaultDataStore",{state:()=>({dataList:[]}),getters:{get:e=>a=>e.dataList.find(t=>t.id===a)},actions:{async getDataList(){return await c.get(`${u}`).then(e=>(this.dataList=e.data,e.data)).catch(e=>(console.log(e),!1))},async getDataById(e){return await c.get(`${u}/${e}`).then(a=>a.data).catch(a=>(console.log(a),!1))},async getDataByName(e){return await c.get(`${u}?cname=${e}`).then(a=>a.data).catch(a=>(console.log(a),!1))},async getDataByCid(e){return await c.get(`${u}?cid=${e}`).then(a=>a.data).catch(a=>(console.log(a),!1))},async getDataByAliasName(e){return await c.get(`${u}?cname=${e}`).then(a=>a.data).catch(a=>(console.log(a),!1))},async exists(e){return await this.getDataById(e)!=null},async saveData(e,a,t){try{return!e.id||!await this.exists(e.id)?await this.insertData(e,a,t):await this.updateData(e,a,t)}catch{return!1}},async insertData(e,a,t){const n="POST";e.id||(e.id=V()),t&&(e.cname=t),a&&(e.cid=a);const i=JSON.stringify(e),r=p;return await c.post(`${u}`,i,{method:n,headers:r}).then(l=>l.data).catch(l=>(console.log(l),!1))},async updateData(e,a,t){const n="PUT";t&&(e.cname=t),a&&(e.cid=a);const i=JSON.stringify(e),r=p;return await c.patch(`${u}/${e.id}`,i,{method:n,headers:r}).then(l=>l.data).catch(l=>(console.log(l),!1))},async deleteData(e){const a="DELETE",t=p;return await c.delete(`${u}/${e}`,{method:a,headers:t}).then(n=>n.data).catch(n=>(console.log(n),!1))}}}),J=()=>{const e={...F()},a=e.getDataById,t=async n=>(console.log("****This is TestDataStore GetDataById "),await a(n));return e.getDataById=t,{...e}},te=(e,a,t,n,i,r)=>{const{getDataById:l,getDataByName:h,getDataByCid:_,getDataList:D,saveData:f,deleteData:$}=J(),g=U({invoke:(o,s,d)=>{}});return{loadHandler:async(o,s)=>{if(console.log("default loadHandler event called",o.data),o.data.id){const d=await l(o.data.id);s&&s(d)}},saveHandler:async(o,s)=>{console.log("default saveHandler event called",o.data),o.data.cname=o.cname,o.data.aliasName=o.aliasName;const d=await f(o.data,o.cid);s&&s(d)},itemChangedHandler:async(o,s)=>{console.log("default itemChangedHandler event received: ",o.cid,o.data),s&&s(!0)},deleteHandler:async(o,s)=>{console.log("default deleteHandler event called",o.data);const d=await $(o.data.id);s&&s(d)},uploadHandler:(o,s)=>{console.log("default uploadHandler event called",o.data),s&&s(!0)},callHandler:(o,s)=>{console.log("default optionHandler event called",o.data),s&&s(!0)},invoke:async(o,s,d)=>{if(g.invoke)return await g.invoke(o,s,d)},fns:g}};export{E as G,ae as _,ee as a,w as e,te as u};
